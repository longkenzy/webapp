const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedMoreMaintenanceCases() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o th√™m 10 case b·∫£o tr√¨ m·∫´u...');

    // L·∫•y danh s√°ch employees ƒë·ªÉ l√†m handler v√† reporter
    const employees = await prisma.employee.findMany({
      take: 5
    });

    if (employees.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y employees n√†o. Vui l√≤ng t·∫°o employees tr∆∞·ªõc.');
      return;
    }

    // L·∫•y danh s√°ch partners ƒë·ªÉ l√†m customer
    const partners = await prisma.partner.findMany({
      take: 5
    });

    // L·∫•y danh s√°ch maintenance case types
    const maintenanceTypes = await prisma.maintenanceCaseType.findMany({
      where: { isActive: true }
    });

    if (maintenanceTypes.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y maintenance types n√†o. Vui l√≤ng t·∫°o maintenance types tr∆∞·ªõc.');
      return;
    }

    // L·∫•y danh s√°ch equipment (n·∫øu c√≥)
    const equipment = await prisma.equipment.findMany({
      take: 5
    });

    // D·ªØ li·ªáu m·∫´u case b·∫£o tr√¨ b·ªï sung
    const additionalMaintenanceCases = [
      {
        title: "B·∫£o tr√¨ h·ªá th·ªëng camera gi√°m s√°t",
        description: "Ki·ªÉm tra, v·ªá sinh v√† hi·ªáu ch·ªânh h·ªá th·ªëng camera gi√°m s√°t t·∫°i khu v·ª±c s·∫£n xu·∫•t, ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh v√† g√≥c quay.",
        customerName: "Nh√† m√°y VWX",
        status: "RECEIVED",
        startDate: new Date('2024-02-01T08:00:00Z'),
        endDate: new Date('2024-02-01T16:00:00Z'),
        notes: "C·∫ßn thang v√† d·ª•ng c·ª• chuy√™n d·ª•ng ƒë·ªÉ ti·∫øp c·∫≠n camera cao",
        userDifficultyLevel: 3,
        userEstimatedTime: 6,
        userImpactLevel: 2,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-29T09:00:00Z')
      },
      {
        title: "Kh·∫Øc ph·ª•c s·ª± c·ªë m√°y t√≠nh ti·ªÅn",
        description: "S·ª≠a ch·ªØa l·ªói m√°y t√≠nh ti·ªÅn kh√¥ng in ƒë∆∞·ª£c h√≥a ƒë∆°n v√† b·ªã treo khi x·ª≠ l√Ω giao d·ªãch l·ªõn.",
        customerName: "Si√™u th·ªã YZA",
        status: "PROCESSING",
        startDate: new Date('2024-01-28T10:00:00Z'),
        notes: "S·ª± c·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn doanh thu, c·∫ßn ∆∞u ti√™n x·ª≠ l√Ω",
        userDifficultyLevel: 4,
        userEstimatedTime: 8,
        userImpactLevel: 4,
        userUrgencyLevel: 4,
        userFormScore: 2,
        userAssessmentDate: new Date('2024-01-27T11:00:00Z')
      },
      {
        title: "B·∫£o tr√¨ h·ªá th·ªëng thang m√°y",
        description: "Th·ª±c hi·ªán b·∫£o tr√¨ ƒë·ªãnh k·ª≥ h·ªá th·ªëng thang m√°y, ki·ªÉm tra d√¢y c√°p, h·ªá th·ªëng ƒëi·ªÅu khi·ªÉn v√† an to√†n.",
        customerName: "T√≤a nh√† BCD",
        status: "COMPLETED",
        startDate: new Date('2024-01-20T07:00:00Z'),
        endDate: new Date('2024-01-21T15:00:00Z'),
        notes: "Ho√†n th√†nh ƒë√∫ng ti·∫øn ƒë·ªô, thang m√°y ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
        userDifficultyLevel: 5,
        userEstimatedTime: 10,
        userImpactLevel: 3,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-18T08:00:00Z')
      },
      {
        title: "C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm qu·∫£n l√Ω nh√¢n s·ª±",
        description: "C·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi c·ªßa ph·∫ßn m·ªÅm qu·∫£n l√Ω nh√¢n s·ª±, backup d·ªØ li·ªáu v√† training ng∆∞·ªùi d√πng.",
        customerName: "C√¥ng ty EFG",
        status: "RECEIVED",
        startDate: new Date('2024-02-05T09:00:00Z'),
        notes: "C·∫ßn backup to√†n b·ªô d·ªØ li·ªáu tr∆∞·ªõc khi c·∫≠p nh·∫≠t",
        userDifficultyLevel: 3,
        userEstimatedTime: 5,
        userImpactLevel: 3,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-02-03T10:00:00Z')
      },
      {
        title: "S·ª≠a ch·ªØa h·ªá th·ªëng b√°o ch√°y",
        description: "Kh·∫Øc ph·ª•c l·ªói h·ªá th·ªëng b√°o ch√°y b·ªã k√≠ch ho·∫°t sai v√† kh√¥ng ho·∫°t ƒë·ªông khi c·∫ßn thi·∫øt.",
        customerName: "Trung t√¢m th∆∞∆°ng m·∫°i HIJ",
        status: "PROCESSING",
        startDate: new Date('2024-01-30T14:00:00Z'),
        notes: "S·ª± c·ªë an to√†n, c·∫ßn x·ª≠ l√Ω kh·∫©n c·∫•p",
        userDifficultyLevel: 5,
        userEstimatedTime: 12,
        userImpactLevel: 5,
        userUrgencyLevel: 5,
        userFormScore: 1,
        userAssessmentDate: new Date('2024-01-29T15:00:00Z')
      },
      {
        title: "B·∫£o tr√¨ m√°y photocopy c√¥ng nghi·ªáp",
        description: "V·ªá sinh, hi·ªáu ch·ªânh v√† thay th·∫ø linh ki·ªán cho m√°y photocopy c√¥ng nghi·ªáp t·∫°i vƒÉn ph√≤ng.",
        customerName: "VƒÉn ph√≤ng KLM",
        status: "RECEIVED",
        startDate: new Date('2024-02-08T11:00:00Z'),
        notes: "C·∫ßn mang theo linh ki·ªán thay th·∫ø",
        userDifficultyLevel: 2,
        userEstimatedTime: 4,
        userImpactLevel: 1,
        userUrgencyLevel: 1,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-02-06T12:00:00Z')
      },
      {
        title: "Kh·∫Øc ph·ª•c l·ªói h·ªá th·ªëng POS",
        description: "X·ª≠ l√Ω l·ªói h·ªá th·ªëng POS kh√¥ng ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi server v√† b·ªã m·∫•t giao d·ªãch.",
        customerName: "C·ª≠a h√†ng NOP",
        status: "COMPLETED",
        startDate: new Date('2024-01-15T13:00:00Z'),
        endDate: new Date('2024-01-16T17:00:00Z'),
        notes: "ƒê√£ kh√¥i ph·ª•c ƒë∆∞·ª£c d·ªØ li·ªáu b·ªã m·∫•t",
        userDifficultyLevel: 4,
        userEstimatedTime: 8,
        userImpactLevel: 4,
        userUrgencyLevel: 3,
        userFormScore: 2,
        userAssessmentDate: new Date('2024-01-14T14:00:00Z')
      },
      {
        title: "B·∫£o tr√¨ h·ªá th·ªëng ƒëi·ªÅu h√≤a trung t√¢m",
        description: "Ki·ªÉm tra, v·ªá sinh v√† b·∫£o tr√¨ h·ªá th·ªëng ƒëi·ªÅu h√≤a trung t√¢m t·∫°i t√≤a nh√† vƒÉn ph√≤ng.",
        customerName: "T√≤a nh√† QRS",
        status: "PROCESSING",
        startDate: new Date('2024-01-31T08:00:00Z'),
        notes: "C·∫ßn th·ª±c hi·ªán v√†o cu·ªëi tu·∫ßn ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ho·∫°t ƒë·ªông",
        userDifficultyLevel: 3,
        userEstimatedTime: 6,
        userImpactLevel: 2,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-29T09:00:00Z')
      },
      {
        title: "C·∫≠p nh·∫≠t h·ªá th·ªëng b·∫£o m·∫≠t m·∫°ng",
        description: "C√†i ƒë·∫∑t v√† c·∫•u h√¨nh c√°c b·∫£n v√° b·∫£o m·∫≠t m·ªõi nh·∫•t cho h·ªá th·ªëng m·∫°ng, bao g·ªìm firewall v√† IDS.",
        customerName: "Ng√¢n h√†ng TUV",
        status: "RECEIVED",
        startDate: new Date('2024-02-10T09:00:00Z'),
        notes: "C·∫ßn th√¥ng b√°o tr∆∞·ªõc cho kh√°ch h√†ng v·ªÅ th·ªùi gian downtime",
        userDifficultyLevel: 4,
        userEstimatedTime: 8,
        userImpactLevel: 4,
        userUrgencyLevel: 3,
        userFormScore: 2,
        userAssessmentDate: new Date('2024-02-08T10:00:00Z')
      },
      {
        title: "S·ª≠a ch·ªØa m√°y ATM",
        description: "Kh·∫Øc ph·ª•c s·ª± c·ªë m√°y ATM kh√¥ng nh·∫≠n th·∫ª v√† b·ªã l·ªói khi kh√°ch h√†ng th·ª±c hi·ªán giao d·ªãch.",
        customerName: "Ng√¢n h√†ng WXY",
        status: "PROCESSING",
        startDate: new Date('2024-01-29T16:00:00Z'),
        notes: "S·ª± c·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªãch v·ª• kh√°ch h√†ng, c·∫ßn x·ª≠ l√Ω nhanh",
        userDifficultyLevel: 4,
        userEstimatedTime: 6,
        userImpactLevel: 4,
        userUrgencyLevel: 4,
        userFormScore: 2,
        userAssessmentDate: new Date('2024-01-28T17:00:00Z')
      }
    ];

    // T·∫°o maintenance cases
    for (let i = 0; i < additionalMaintenanceCases.length; i++) {
      const caseData = additionalMaintenanceCases[i];
      const randomEmployee = employees[Math.floor(Math.random() * employees.length)];
      const randomMaintenanceType = maintenanceTypes[Math.floor(Math.random() * maintenanceTypes.length)];
      const randomPartner = partners.length > 0 ? partners[Math.floor(Math.random() * partners.length)] : null;
      const randomEquipment = equipment.length > 0 ? equipment[Math.floor(Math.random() * equipment.length)] : null;

      const maintenanceCase = await prisma.maintenanceCase.create({
        data: {
          title: caseData.title,
          description: caseData.description,
          reporterId: randomEmployee.id,
          handlerId: randomEmployee.id,
          customerName: caseData.customerName,
          customerId: randomPartner ? randomPartner.id : null,
          equipmentId: randomEquipment ? randomEquipment.id : null,
          maintenanceType: 'PREVENTIVE', // Default enum value
          maintenanceTypeId: randomMaintenanceType.id,
          startDate: caseData.startDate,
          endDate: caseData.endDate,
          status: caseData.status,
          notes: caseData.notes,
          userDifficultyLevel: caseData.userDifficultyLevel,
          userEstimatedTime: caseData.userEstimatedTime,
          userImpactLevel: caseData.userImpactLevel,
          userUrgencyLevel: caseData.userUrgencyLevel,
          userFormScore: caseData.userFormScore,
          userAssessmentDate: caseData.userAssessmentDate
        }
      });

      console.log(`‚úÖ T·∫°o case b·∫£o tr√¨: ${maintenanceCase.title}`);
    }

    console.log(`üéâ ƒê√£ t·∫°o th√†nh c√¥ng th√™m ${additionalMaintenanceCases.length} case b·∫£o tr√¨ m·∫´u!`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y function
seedMoreMaintenanceCases();
