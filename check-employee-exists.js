const { PrismaClient } = require('@prisma/client');

const devDb = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://neondb_owner:npg_jzQACkco0T8S@ep-rapid-dream-a1b4rn5j-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
    }
  }
});

async function checkEmployee() {
  try {
    console.log('=== Ki·ªÉm tra Employee trong Development Database ===\n');

    // Ki·ªÉm tra employee v·ªõi ID c·ª• th·ªÉ
    const employee = await devDb.employee.findUnique({
      where: { id: 'cmfxouqim0000js045n6mlsd6' }
    });

    if (employee) {
      console.log('‚úÖ Employee ƒë√£ t·ªìn t·∫°i:');
      console.log(`   ID: ${employee.id}`);
      console.log(`   T√™n: ${employee.fullName}`);
      console.log(`   Email: ${employee.companyEmail}`);
      console.log(`   Department: ${employee.department}`);
      console.log(`   Position: ${employee.position}`);
    } else {
      console.log('‚ùå Employee ch∆∞a t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra email c√≥ b·ªã tr√πng kh√¥ng
    const emailCheck = await devDb.employee.findFirst({
      where: { companyEmail: 'khoatna@smartservices.com.vn' }
    });

    if (emailCheck) {
      console.log('\n‚ö†Ô∏è  Email ƒë√£ t·ªìn t·∫°i:');
      console.log(`   ID: ${emailCheck.id}`);
      console.log(`   T√™n: ${emailCheck.fullName}`);
      console.log(`   Email: ${emailCheck.companyEmail}`);
    } else {
      console.log('\n‚úÖ Email ch∆∞a b·ªã tr√πng');
    }

    // ƒê·∫øm t·ªïng s·ªë employees
    const totalEmployees = await devDb.employee.count();
    console.log(`\nüìä T·ªïng s·ªë employees trong dev database: ${totalEmployees}`);

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  } finally {
    await devDb.$disconnect();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
  }
}

checkEmployee();
