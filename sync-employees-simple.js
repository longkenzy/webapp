const { PrismaClient } = require('@prisma/client');

// Production database connection
const prodDb = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://neondb_owner:npg_jzQACkco0T8S@ep-broad-truth-a1v49nhu-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
    }
  }
});

// Development database connection
const devDb = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://neondb_owner:npg_jzQACkco0T8S@ep-rapid-dream-a1b4rn5j-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
    }
  }
});

async function syncEmployees() {
  try {
    console.log('=== ƒê·ªìng b·ªô Employee t·ª´ Production sang Development ===\n');

    // L·∫•y employee c√≤n thi·∫øu t·ª´ production
    const prodEmployees = await prodDb.employee.findMany({
      where: {
        id: 'cmfxouqim0000js045n6mlsd6' // ID c·ªßa Tr·∫ßn Nguy·ªÖn Anh Khoa
      }
    });

    if (prodEmployees.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y employee c·∫ßn ƒë·ªìng b·ªô');
      return;
    }

    const prodEmployee = prodEmployees[0];
    console.log(`üì• T√¨m th·∫•y employee: ${prodEmployee.fullName}`);

    // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i trong dev ch∆∞a
    const existingEmployee = await devDb.employee.findUnique({
      where: { id: prodEmployee.id }
    });

    if (existingEmployee) {
      console.log('‚úÖ Employee ƒë√£ t·ªìn t·∫°i trong development database');
      return;
    }

    // T·∫°o employee m·ªõi v·ªõi d·ªØ li·ªáu t·ªëi thi·ªÉu
    console.log('‚ûï T·∫°o employee m·ªõi...');
    
    const newEmployee = await devDb.employee.create({
      data: {
        id: prodEmployee.id,
        fullName: prodEmployee.fullName,
        dateOfBirth: prodEmployee.dateOfBirth || new Date('1990-01-01'),
        gender: prodEmployee.gender || 'OTHER',
        hometown: prodEmployee.hometown || 'Kh√¥ng x√°c ƒë·ªãnh',
        religion: prodEmployee.religion || 'Kh√¥ng',
        ethnicity: prodEmployee.ethnicity || 'Kinh',
        startDate: prodEmployee.startDate || new Date(),
        primaryPhone: prodEmployee.primaryPhone || '0000000000',
        personalEmail: prodEmployee.personalEmail || prodEmployee.companyEmail,
        companyEmail: prodEmployee.companyEmail,
        placeOfBirth: prodEmployee.placeOfBirth || 'Kh√¥ng x√°c ƒë·ªãnh',
        permanentAddress: prodEmployee.permanentAddress || 'Kh√¥ng x√°c ƒë·ªãnh',
        department: prodEmployee.department,
        position: prodEmployee.position,
        status: prodEmployee.status || 'active',
        createdAt: prodEmployee.createdAt,
        updatedAt: prodEmployee.updatedAt
      }
    });

    console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng employee: ${newEmployee.fullName}`);
    console.log(`üìß Email: ${newEmployee.companyEmail}`);
    console.log(`üè¢ Department: ${newEmployee.department}`);
    console.log(`üíº Position: ${newEmployee.position}`);

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  } finally {
    await prodDb.$disconnect();
    await devDb.$disconnect();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
  }
}

syncEmployees();
