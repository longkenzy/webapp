const { PrismaClient } = require('@prisma/client');

// Use production database URL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL_PROD || process.env.DATABASE_URL
    }
  }
});

const caseTypes = [
  'B·∫£o tr√¨ m√°y t√≠nh ƒë·ªãnh k·ª≥',
  'C√†i ƒë·∫∑t m√°y t√≠nh m·ªõi',
  'C√†i ƒë·∫∑t ph·∫ßn m·ªÅm vƒÉn ph√≤ng',
  'C√†i ƒë·∫∑t thi·∫øt b·ªã ngo·∫°i vi',
  'C√†i ƒë·∫∑t ·ª©ng d·ª•ng',
  'C√†i ƒë·∫∑t m·∫°ng LAN',
  'C·∫•p quy·ªÅn truy c·∫≠p',
  'C·∫•u h√¨nh WiFi',
  'C·∫•u h√¨nh ƒëi·ªán tho·∫°i c√¥ng ty',
  'Chuy·ªÉn d·ªØ li·ªáu m√°y c≈© sang m·ªõi',
  'D·ªçn d·∫πp ·ªï c·ª©ng',
  'ƒê·ªïi m·∫≠t kh·∫©u',
  'H·ªó tr·ª£ in ·∫•n',
  'H·ªó tr·ª£ s·ª≠ d·ª•ng ph·∫ßn m·ªÅm',
  'Kh·∫Øc ph·ª•c l·ªói ƒëi·ªán tho·∫°i',
  'Kh·∫Øc ph·ª•c l·ªói email',
  'Kh·∫Øc ph·ª•c m·∫•t m·∫°ng',
  'Ph·ª•c h·ªìi d·ªØ li·ªáu',
  'Sao l∆∞u d·ªØ li·ªáu',
  'S·ª≠a l·ªói m√°y t√≠nh',
  'T·∫°o t√†i kho·∫£n nh√¢n vi√™n m·ªõi',
  'Thay th·∫ø linh ki·ªán',
  'Thu h·ªìi quy·ªÅn truy c·∫≠p',
  'T·ªëi ∆∞u t·ªëc ƒë·ªô m·∫°ng',
  'Vi·∫øt t√†i li·ªáu'
];

async function addInternalCaseTypes() {
  console.log('üöÄ Starting to add internal case types to PRODUCTION database...');
  console.log(`üìä Total case types to add: ${caseTypes.length}`);
  
  let addedCount = 0;
  let skippedCount = 0;

  try {
    for (const caseTypeName of caseTypes) {
      try {
        // Check if case type already exists
        const existingCaseType = await prisma.caseType.findFirst({
          where: { name: caseTypeName }
        });

        if (existingCaseType) {
          console.log(`‚ö†Ô∏è  Case type already exists: "${caseTypeName}" (ID: ${existingCaseType.id})`);
          skippedCount++;
        } else {
          // Create new case type
          const newCaseType = await prisma.caseType.create({
            data: {
              name: caseTypeName,
              isActive: true
            }
          });
          console.log(`‚úÖ Added case type: "${caseTypeName}" (ID: ${newCaseType.id})`);
          addedCount++;
        }
      } catch (error) {
        console.error(`‚ùå Error adding case type "${caseTypeName}":`, error.message);
      }
    }

    console.log('\nüìà Summary:');
    console.log(`‚úÖ Successfully added: ${addedCount} case types`);
    console.log(`‚ö†Ô∏è  Already existed: ${skippedCount} case types`);
    console.log(`üìä Total processed: ${addedCount + skippedCount} case types`);
    
    // Verify total count
    const totalCaseTypes = await prisma.caseType.count();
    console.log(`üóÇÔ∏è  Total case types in database: ${totalCaseTypes}`);

    console.log('\nüéâ Process completed successfully!');

  } catch (error) {
    console.error('‚ùå Fatal error:', error);
  } finally {
    await prisma.$disconnect();
    console.log('üîå Database connection closed.');
  }
}

// Execute the function
addInternalCaseTypes()
  .catch((error) => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
  });
