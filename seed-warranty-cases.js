const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedWarrantyCases() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho Warranty cases...');

    // L·∫•y danh s√°ch employees, partners, v√† warranty types
    const employees = await prisma.employee.findMany({ take: 10 });
    const partners = await prisma.partner.findMany({ take: 10 });
    const warrantyTypes = await prisma.warrantyType.findMany();

    if (employees.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y employees. Vui l√≤ng t·∫°o employees tr∆∞·ªõc.');
      return;
    }

    if (warrantyTypes.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y warranty types. Vui l√≤ng t·∫°o warranty types tr∆∞·ªõc.');
      return;
    }

    console.log(`üìä T√¨m th·∫•y ${employees.length} employees, ${partners.length} partners, ${warrantyTypes.length} warranty types`);

    // D·ªØ li·ªáu m·∫´u cho warranty cases
    const warrantyCases = [
      {
        title: 'B·∫£o h√†nh m√°y t√≠nh vƒÉn ph√≤ng Dell Optiplex',
        description: 'M√°y t√≠nh vƒÉn ph√≤ng Dell Optiplex 7090 g·∫∑p s·ª± c·ªë kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c, c·∫ßn ki·ªÉm tra v√† s·ª≠a ch·ªØa theo ch·∫ø ƒë·ªô b·∫£o h√†nh.',
        customerName: 'Anh Nguy·ªÖn VƒÉn An',
        status: 'RECEIVED',
        notes: 'Kh√°ch h√†ng b√°o m√°y t√≠nh kh√¥ng kh·ªüi ƒë·ªông t·ª´ s√°ng nay. C·∫ßn ki·ªÉm tra ngu·ªìn v√† mainboard.'
      },
      {
        title: 'B·∫£o h√†nh ph·∫ßn m·ªÅm qu·∫£n l√Ω nh√¢n s·ª±',
        description: 'Ph·∫ßn m·ªÅm qu·∫£n l√Ω nh√¢n s·ª± HRM Pro g·∫∑p l·ªói kh√¥ng th·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi h·ªá th·ªëng ch·∫•m c√¥ng.',
        customerName: 'Ch·ªã Tr·∫ßn Th·ªã B√¨nh',
        status: 'PROCESSING',
        notes: 'L·ªói xu·∫•t hi·ªán sau khi update version m·ªõi. C·∫ßn rollback ho·∫∑c fix bug.'
      },
      {
        title: 'B·∫£o h√†nh server HP ProLiant',
        description: 'Server HP ProLiant DL380 Gen10 g·∫∑p s·ª± c·ªë ·ªï c·ª©ng RAID, c·∫ßn thay th·∫ø ·ªï c·ª©ng b·ªã l·ªói theo ch·∫ø ƒë·ªô b·∫£o h√†nh.',
        customerName: 'Anh L√™ Minh C∆∞·ªùng',
        status: 'PROCESSING',
        notes: '·ªî c·ª©ng slot 3 b√°o l·ªói. C·∫ßn thay th·∫ø v√† rebuild RAID array.'
      },
      {
        title: 'B·∫£o h√†nh d·ªãch v·ª• b·∫£o tr√¨ h·ªá th·ªëng m·∫°ng',
        description: 'D·ªãch v·ª• b·∫£o tr√¨ ƒë·ªãnh k·ª≥ h·ªá th·ªëng m·∫°ng LAN/WAN c·ªßa c√¥ng ty, ki·ªÉm tra v√† t·ªëi ∆∞u hi·ªáu su·∫•t.',
        customerName: 'Ch·ªã Ph·∫°m Th·ªã Dung',
        status: 'COMPLETED',
        notes: 'ƒê√£ ho√†n th√†nh b·∫£o tr√¨ ƒë·ªãnh k·ª≥ th√°ng 12. H·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.'
      },
      {
        title: 'B·∫£o h√†nh m·ªü r·ªông cho h·ªá th·ªëng camera an ninh',
        description: 'Gia h·∫°n b·∫£o h√†nh cho h·ªá th·ªëng camera an ninh 32 k√™nh, bao g·ªìm ki·ªÉm tra v√† thay th·∫ø linh ki·ªán h·ªèng.',
        customerName: 'Anh Ho√†ng VƒÉn Em',
        status: 'RECEIVED',
        notes: 'Kh√°ch h√†ng y√™u c·∫ßu gia h·∫°n b·∫£o h√†nh th√™m 12 th√°ng cho h·ªá th·ªëng camera.'
      },
      {
        title: 'B·∫£o h√†nh thay th·∫ø m√°y in laser Canon',
        description: 'M√°y in laser Canon LBP6030w b·ªã h·ªèng motor c·∫•p gi·∫•y, c·∫ßn thay th·∫ø m√°y m·ªõi theo ch·∫ø ƒë·ªô b·∫£o h√†nh.',
        customerName: 'Ch·ªã Nguy·ªÖn Th·ªã Ph∆∞∆°ng',
        status: 'PROCESSING',
        notes: 'M√°y in ƒë√£ qu√° 2 nƒÉm tu·ªïi, motor c·∫•p gi·∫•y h·ªèng kh√¥ng s·ª≠a ƒë∆∞·ª£c. C·∫ßn thay m√°y m·ªõi.'
      },
      {
        title: 'B·∫£o h√†nh s·ª≠a ch·ªØa laptop Lenovo ThinkPad',
        description: 'Laptop Lenovo ThinkPad T14 g·∫∑p s·ª± c·ªë m√†n h√¨nh b·ªã s·ªçc, c·∫ßn thay th·∫ø m√†n h√¨nh LCD theo b·∫£o h√†nh.',
        customerName: 'Anh Tr·∫ßn VƒÉn Giang',
        status: 'COMPLETED',
        notes: 'ƒê√£ thay th·∫ø m√†n h√¨nh LCD m·ªõi. Laptop ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.'
      },
      {
        title: 'B·∫£o h√†nh ph√≤ng ng·ª´a h·ªá th·ªëng ƒëi·ªÅu h√≤a server',
        description: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥ h·ªá th·ªëng ƒëi·ªÅu h√≤a ph√≤ng server, v·ªá sinh v√† ki·ªÉm tra ho·∫°t ƒë·ªông c√°c thi·∫øt b·ªã.',
        customerName: 'Ch·ªã V≈© Th·ªã Hoa',
        status: 'RECEIVED',
        notes: 'L·ªãch b·∫£o tr√¨ ƒë·ªãnh k·ª≥ qu√Ω 4. C·∫ßn v·ªá sinh v√† ki·ªÉm tra gas ƒëi·ªÅu h√≤a.'
      },
      {
        title: 'B·∫£o h√†nh kh·∫©n c·∫•p h·ªá th·ªëng firewall',
        description: 'H·ªá th·ªëng firewall Fortinet b·ªã down kh·∫©n c·∫•p, c·∫ßn kh·∫Øc ph·ª•c ngay l·∫≠p t·ª©c ƒë·ªÉ ƒë·∫£m b·∫£o an ninh m·∫°ng.',
        customerName: 'Anh ƒê·∫∑ng Minh Tu·∫•n',
        status: 'PROCESSING',
        notes: 'S·ª± c·ªë kh·∫©n c·∫•p l√∫c 2h s√°ng. Firewall kh√¥ng ph·∫£n h·ªìi, c·∫ßn kh·∫Øc ph·ª•c ngay.'
      },
      {
        title: 'B·∫£o h√†nh ph·∫ßn m·ªÅm k·∫ø to√°n MISA',
        description: 'Ph·∫ßn m·ªÅm k·∫ø to√°n MISA SME.NET g·∫∑p l·ªói kh√¥ng th·ªÉ xu·∫•t b√°o c√°o t√†i ch√≠nh, c·∫ßn h·ªó tr·ª£ kh·∫Øc ph·ª•c.',
        customerName: 'Ch·ªã L√™ Th·ªã Kim',
        status: 'COMPLETED',
        notes: 'ƒê√£ kh·∫Øc ph·ª•c l·ªói do conflict v·ªõi Windows Update. Ph·∫ßn m·ªÅm ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.'
      }
    ];

    console.log(`üìù T·∫°o ${warrantyCases.length} warranty cases...`);

    // T·∫°o t·ª´ng warranty case
    for (let i = 0; i < warrantyCases.length; i++) {
      const caseData = warrantyCases[i];
      
      try {
        // Random ch·ªçn reporter, handler, warranty type
        const randomReporter = employees[Math.floor(Math.random() * employees.length)];
        const randomHandler = employees[Math.floor(Math.random() * employees.length)];
        const randomWarrantyType = warrantyTypes[Math.floor(Math.random() * warrantyTypes.length)];
        const randomPartner = partners.length > 0 ? partners[Math.floor(Math.random() * partners.length)] : null;

        // Random th·ªùi gian
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - Math.floor(Math.random() * 30)); // 0-30 ng√†y tr∆∞·ªõc
        
        let endDate = null;
        if (caseData.status === 'COMPLETED') {
          endDate = new Date(startDate);
          endDate.setDate(endDate.getDate() + Math.floor(Math.random() * 7) + 1); // 1-7 ng√†y sau start date
        }

        // Random assessment levels (1-5)
        const difficultyLevel = Math.floor(Math.random() * 5) + 1;
        const estimatedTime = Math.floor(Math.random() * 5) + 1;
        const impactLevel = Math.floor(Math.random() * 5) + 1;
        const urgencyLevel = Math.floor(Math.random() * 5) + 1;
        const formScore = Math.floor(Math.random() * 3) + 1; // 1-3

        const created = await prisma.warranty.create({
          data: {
            title: caseData.title,
            description: caseData.description,
            reporterId: randomReporter.id,
            handlerId: randomHandler.id,
            warrantyTypeId: randomWarrantyType.id,
            customerId: randomPartner?.id || null,
            customerName: caseData.customerName,
            startDate: startDate,
            endDate: endDate,
            status: caseData.status,
            notes: caseData.notes,
            userDifficultyLevel: difficultyLevel,
            userEstimatedTime: estimatedTime,
            userImpactLevel: impactLevel,
            userUrgencyLevel: urgencyLevel,
            userFormScore: formScore,
            userAssessmentDate: startDate
          }
        });

        console.log(`‚úÖ ƒê√£ t·∫°o: ${created.title} (${created.status})`);
      } catch (error) {
        console.error(`‚ùå L·ªói t·∫°o case ${i + 1}:`, error.message);
      }
    }

    // Ki·ªÉm tra k·∫øt qu·∫£
    const totalWarrantyCases = await prisma.warranty.count();
    console.log(`\nüìä T·ªïng s·ªë warranty cases trong database: ${totalWarrantyCases}`);

    // Hi·ªÉn th·ªã th·ªëng k√™ theo status
    const statusStats = await prisma.warranty.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });

    console.log('\nüìà Th·ªëng k√™ theo tr·∫°ng th√°i:');
    statusStats.forEach(stat => {
      const statusText = {
        'RECEIVED': 'Ti·∫øp nh·∫≠n',
        'PROCESSING': 'ƒêang x·ª≠ l√Ω',
        'COMPLETED': 'Ho√†n th√†nh',
        'CANCELLED': 'H·ªßy'
      }[stat.status] || stat.status;
      
      console.log(`   ${statusText}: ${stat._count.status} cases`);
    });

    console.log('\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u cho Warranty cases!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh t·∫°o d·ªØ li·ªáu m·∫´u:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
seedWarrantyCases()
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
