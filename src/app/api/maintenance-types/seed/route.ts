import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    console.log('üå± Seeding maintenance case types...');

    const maintenanceTypes = [
      {
        name: 'B·∫£o tr√¨ ph√≤ng ng·ª´a',
        description: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥ ƒë·ªÉ ngƒÉn ng·ª´a s·ª± c·ªë',
      },
      {
        name: 'B·∫£o tr√¨ s·ª≠a ch·ªØa',
        description: 'S·ª≠a ch·ªØa thi·∫øt b·ªã khi c√≥ s·ª± c·ªë',
      },
      {
        name: 'B·∫£o tr√¨ kh·∫©n c·∫•p',
        description: 'B·∫£o tr√¨ kh·∫©n c·∫•p khi c√≥ s·ª± c·ªë nghi√™m tr·ªçng',
      },
      {
        name: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥',
        description: 'B·∫£o tr√¨ theo l·ªãch tr√¨nh ƒë·ªãnh k·ª≥',
      },
      {
        name: 'N√¢ng c·∫•p thi·∫øt b·ªã',
        description: 'N√¢ng c·∫•p ho·∫∑c c·∫£i ti·∫øn thi·∫øt b·ªã',
      },
      {
        name: 'Ki·ªÉm tra thi·∫øt b·ªã',
        description: 'Ki·ªÉm tra t√¨nh tr·∫°ng ho·∫°t ƒë·ªông c·ªßa thi·∫øt b·ªã',
      },
    ];

    const createdTypes = [];
    for (const type of maintenanceTypes) {
      const created = await prisma.maintenanceCaseType.upsert({
        where: { name: type.name },
        update: {},
        create: type,
      });
      createdTypes.push(created);
    }

    console.log('‚úÖ Maintenance case types seeded successfully!');

    return NextResponse.json({
      success: true,
      message: 'Maintenance case types seeded successfully',
      data: createdTypes,
    });
  } catch (error) {
    console.error('‚ùå Error seeding maintenance types:', error);
    return NextResponse.json(
      {
        success: false,
        message: 'Failed to seed maintenance types',
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
