const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedMoreWarrantyCases() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o th√™m 10 warranty cases...');

    // L·∫•y danh s√°ch employees, partners, v√† warranty types
    const employees = await prisma.employee.findMany({ take: 10 });
    const partners = await prisma.partner.findMany({ take: 10 });
    const warrantyTypes = await prisma.warrantyType.findMany();

    if (employees.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y employees. Vui l√≤ng t·∫°o employees tr∆∞·ªõc.');
      return;
    }

    if (warrantyTypes.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y warranty types. Vui l√≤ng t·∫°o warranty types tr∆∞·ªõc.');
      return;
    }

    console.log(`üìä T√¨m th·∫•y ${employees.length} employees, ${partners.length} partners, ${warrantyTypes.length} warranty types`);

    // D·ªØ li·ªáu m·∫´u cho 10 warranty cases m·ªõi
    const moreWarrantyCases = [
      {
        title: 'B·∫£o h√†nh UPS APC Smart-UPS 3000VA',
        description: 'B·ªô l∆∞u ƒëi·ªán UPS APC Smart-UPS 3000VA b√°o l·ªói pin y·∫øu, c·∫ßn thay th·∫ø b·ªô pin theo ch·∫ø ƒë·ªô b·∫£o h√†nh.',
        customerName: 'Anh V√µ Minh Long',
        status: 'RECEIVED',
        notes: 'UPS b√°o c·∫£nh b√°o pin y·∫øu li√™n t·ª•c. C·∫ßn ki·ªÉm tra v√† thay pin backup.'
      },
      {
        title: 'B·∫£o h√†nh ph·∫ßn m·ªÅm ERP SAP Business One',
        description: 'Ph·∫ßn m·ªÅm ERP SAP Business One g·∫∑p l·ªói kh√¥ng th·ªÉ t·∫°o b√°o c√°o inventory, module qu·∫£n l√Ω kho b·ªã l·ªói.',
        customerName: 'Ch·ªã ƒê·ªó Th·ªã Mai',
        status: 'PROCESSING',
        notes: 'L·ªói xu·∫•t hi·ªán sau khi import d·ªØ li·ªáu t·ª´ Excel. Module inventory kh√¥ng ph·∫£n h·ªìi.'
      },
      {
        title: 'B·∫£o h√†nh switch m·∫°ng Cisco Catalyst 2960',
        description: 'Switch m·∫°ng Cisco Catalyst 2960-24TC g·∫∑p s·ª± c·ªë m·ªôt s·ªë port m·∫°ng kh√¥ng ho·∫°t ƒë·ªông, c·∫ßn ki·ªÉm tra v√† s·ª≠a ch·ªØa.',
        customerName: 'Anh B√πi VƒÉn Nam',
        status: 'PROCESSING',
        notes: 'Port 12-16 kh√¥ng detect ƒë∆∞·ª£c thi·∫øt b·ªã. LED b√°o l·ªói m√†u ƒë·ªè.'
      },
      {
        title: 'B·∫£o h√†nh d·ªãch v·ª• backup d·ªØ li·ªáu t·ª± ƒë·ªông',
        description: 'D·ªãch v·ª• backup d·ªØ li·ªáu t·ª± ƒë·ªông h√†ng ƒë√™m b·ªã gi√°n ƒëo·∫°n, c·∫ßn kh·∫Øc ph·ª•c v√† ƒë·∫£m b·∫£o backup ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.',
        customerName: 'Ch·ªã L√Ω Th·ªã Oanh',
        status: 'COMPLETED',
        notes: 'ƒê√£ kh·∫Øc ph·ª•c l·ªói script backup. H·ªá th·ªëng backup ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.'
      },
      {
        title: 'B·∫£o h√†nh m·ªü r·ªông cho h·ªá th·ªëng t·ªïng ƒë√†i IP',
        description: 'Gia h·∫°n b·∫£o h√†nh cho h·ªá th·ªëng t·ªïng ƒë√†i IP Grandstream, bao g·ªìm 20 m√°y nh√°nh v√† 4 trunk line.',
        customerName: 'Anh Phan Thanh Phong',
        status: 'RECEIVED',
        notes: 'Kh√°ch h√†ng y√™u c·∫ßu gia h·∫°n b·∫£o h√†nh v√† n√¢ng c·∫•p firmware m·ªõi nh·∫•t.'
      },
      {
        title: 'B·∫£o h√†nh thay th·∫ø m√°y photocopy Ricoh MP 3055',
        description: 'M√°y photocopy Ricoh MP 3055 b·ªã k·∫πt gi·∫•y li√™n t·ª•c v√† ch·∫•t l∆∞·ª£ng in k√©m, c·∫ßn thay th·∫ø theo b·∫£o h√†nh.',
        customerName: 'Ch·ªã Ho√†ng Th·ªã Quy√™n',
        status: 'PROCESSING',
        notes: 'M√°y ƒë√£ s·ª≠ d·ª•ng 3 nƒÉm, drum v√† fuser h·ªèng. C·∫ßn thay m√°y m·ªõi.'
      },
      {
        title: 'B·∫£o h√†nh s·ª≠a ch·ªØa m√°y chi·∫øu Epson EB-X41',
        description: 'M√°y chi·∫øu Epson EB-X41 b·ªã m·ªù h√¨nh ·∫£nh v√† c√≥ v·ªát ƒëen tr√™n m√†n h√¨nh chi·∫øu, c·∫ßn v·ªá sinh v√† thay th·∫ø b√≥ng ƒë√®n.',
        customerName: 'Anh Ng√¥ VƒÉn S∆°n',
        status: 'COMPLETED',
        notes: 'ƒê√£ v·ªá sinh lens v√† thay b√≥ng ƒë√®n m·ªõi. M√°y chi·∫øu ho·∫°t ƒë·ªông t·ªët.'
      },
      {
        title: 'B·∫£o h√†nh ph√≤ng ng·ª´a h·ªá th·ªëng c·ª≠a t·ª´ access control',
        description: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥ h·ªá th·ªëng ki·ªÉm so√°t ra v√†o b·∫±ng th·∫ª t·ª´, ki·ªÉm tra ƒë·∫ßu ƒë·ªçc th·∫ª v√† c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm.',
        customerName: 'Ch·ªã Tr·ªãnh Th·ªã Th·∫£o',
        status: 'RECEIVED',
        notes: 'L·ªãch b·∫£o tr√¨ ƒë·ªãnh k·ª≥ 6 th√°ng. C·∫ßn ki·ªÉm tra 8 ƒë·∫ßu ƒë·ªçc th·∫ª v√† database.'
      },
      {
        title: 'B·∫£o h√†nh kh·∫©n c·∫•p h·ªá th·ªëng gi√°m s√°t m·∫°ng',
        description: 'H·ªá th·ªëng gi√°m s√°t m·∫°ng PRTG b·ªã down, kh√¥ng th·ªÉ monitor c√°c thi·∫øt b·ªã m·∫°ng, c·∫ßn kh·∫Øc ph·ª•c kh·∫©n c·∫•p.',
        customerName: 'Anh V∆∞∆°ng Minh Tu·∫•n',
        status: 'PROCESSING',
        notes: 'H·ªá th·ªëng PRTG kh√¥ng kh·ªüi ƒë·ªông sau khi restart server. C·∫ßn kh·∫Øc ph·ª•c ngay.'
      },
      {
        title: 'B·∫£o h√†nh ph·∫ßn m·ªÅm kho v·∫≠n WMS Pro',
        description: 'Ph·∫ßn m·ªÅm qu·∫£n l√Ω kho v·∫≠n WMS Pro g·∫∑p l·ªói kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho real-time, ·∫£nh h∆∞·ªüng ƒë·∫øn v·∫≠n h√†nh.',
        customerName: 'Ch·ªã L√™ Th·ªã Uy√™n',
        status: 'COMPLETED',
        notes: 'ƒê√£ kh·∫Øc ph·ª•c l·ªói sync database. H·ªá th·ªëng c·∫≠p nh·∫≠t real-time b√¨nh th∆∞·ªùng.'
      }
    ];

    console.log(`üìù T·∫°o th√™m ${moreWarrantyCases.length} warranty cases...`);

    // T·∫°o t·ª´ng warranty case
    for (let i = 0; i < moreWarrantyCases.length; i++) {
      const caseData = moreWarrantyCases[i];
      
      try {
        // Random ch·ªçn reporter, handler, warranty type
        const randomReporter = employees[Math.floor(Math.random() * employees.length)];
        const randomHandler = employees[Math.floor(Math.random() * employees.length)];
        const randomWarrantyType = warrantyTypes[Math.floor(Math.random() * warrantyTypes.length)];
        const randomPartner = partners.length > 0 ? partners[Math.floor(Math.random() * partners.length)] : null;

        // Random th·ªùi gian
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - Math.floor(Math.random() * 45)); // 0-45 ng√†y tr∆∞·ªõc
        
        let endDate = null;
        if (caseData.status === 'COMPLETED') {
          endDate = new Date(startDate);
          endDate.setDate(endDate.getDate() + Math.floor(Math.random() * 10) + 1); // 1-10 ng√†y sau start date
        }

        // Random assessment levels (1-5)
        const difficultyLevel = Math.floor(Math.random() * 5) + 1;
        const estimatedTime = Math.floor(Math.random() * 5) + 1;
        const impactLevel = Math.floor(Math.random() * 5) + 1;
        const urgencyLevel = Math.floor(Math.random() * 5) + 1;
        const formScore = Math.floor(Math.random() * 3) + 1; // 1-3

        const created = await prisma.warranty.create({
          data: {
            title: caseData.title,
            description: caseData.description,
            reporterId: randomReporter.id,
            handlerId: randomHandler.id,
            warrantyTypeId: randomWarrantyType.id,
            customerId: randomPartner?.id || null,
            customerName: caseData.customerName,
            startDate: startDate,
            endDate: endDate,
            status: caseData.status,
            notes: caseData.notes,
            userDifficultyLevel: difficultyLevel,
            userEstimatedTime: estimatedTime,
            userImpactLevel: impactLevel,
            userUrgencyLevel: urgencyLevel,
            userFormScore: formScore,
            userAssessmentDate: startDate
          }
        });

        console.log(`‚úÖ ƒê√£ t·∫°o: ${created.title} (${created.status})`);
      } catch (error) {
        console.error(`‚ùå L·ªói t·∫°o case ${i + 1}:`, error.message);
      }
    }

    // Ki·ªÉm tra k·∫øt qu·∫£
    const totalWarrantyCases = await prisma.warranty.count();
    console.log(`\nüìä T·ªïng s·ªë warranty cases trong database: ${totalWarrantyCases}`);

    // Hi·ªÉn th·ªã th·ªëng k√™ theo status
    const statusStats = await prisma.warranty.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });

    console.log('\nüìà Th·ªëng k√™ theo tr·∫°ng th√°i:');
    statusStats.forEach(stat => {
      const statusText = {
        'RECEIVED': 'Ti·∫øp nh·∫≠n',
        'PROCESSING': 'ƒêang x·ª≠ l√Ω',
        'COMPLETED': 'Ho√†n th√†nh',
        'CANCELLED': 'H·ªßy'
      }[stat.status] || stat.status;
      
      console.log(`   ${statusText}: ${stat._count.status} cases`);
    });

    // Hi·ªÉn th·ªã th·ªëng k√™ theo warranty type
    const typeStats = await prisma.warranty.groupBy({
      by: ['warrantyTypeId'],
      _count: {
        warrantyTypeId: true
      },
      orderBy: {
        _count: {
          warrantyTypeId: 'desc'
        }
      }
    });

    console.log('\nüìä Th·ªëng k√™ theo lo·∫°i b·∫£o h√†nh:');
    for (const stat of typeStats) {
      const warrantyType = await prisma.warrantyType.findUnique({
        where: { id: stat.warrantyTypeId }
      });
      console.log(`   ${warrantyType?.name}: ${stat._count.warrantyTypeId} cases`);
    }

    console.log('\nüéâ Ho√†n th√†nh t·∫°o th√™m 10 warranty cases!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh t·∫°o d·ªØ li·ªáu m·∫´u:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
seedMoreWarrantyCases()
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
