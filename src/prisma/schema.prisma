generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String?
  phone                   String?
  department              String?
  status                  String?                  @default("active")
  role                    Role                     @default(USER)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  employeeId              String?                  @unique
  password                String
  username                String                   @unique
  deliveryCaseComments    DeliveryCaseComment[]
  deliveryCaseWorklogs    DeliveryCaseWorklog[]
  deploymentCaseComments  DeploymentCaseComment[]
  deploymentCaseWorklogs  DeploymentCaseWorklog[]
  incidentComments        IncidentComment[]
  incidentWorklogs        IncidentWorklog[]
  internalCaseComments    InternalCaseComment[]
  internalCaseWorklogs    InternalCaseWorklog[]
  maintenanceCaseComments MaintenanceCaseComment[]
  maintenanceCaseWorklogs MaintenanceCaseWorklog[]
  notifications           Notification[]
  receivingCaseComments   ReceivingCaseComment[]
  receivingCaseWorklogs   ReceivingCaseWorklog[]
  schedules               Schedule[]
  employee                Employee?                @relation(fields: [employeeId], references: [id])
  warrantyComments        WarrantyComment[]
  warrantyWorklogs        WarrantyWorklog[]
}

model Employee {
  id                       String            @id @default(cuid())
  fullName                 String
  dateOfBirth              DateTime
  gender                   String
  hometown                 String
  religion                 String
  ethnicity                String
  startDate                DateTime
  primaryPhone             String
  secondaryPhone           String?
  personalEmail            String
  companyEmail             String            @unique
  placeOfBirth             String
  permanentAddress         String
  temporaryAddress         String?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  avatar                   String?
  contractType             String?
  department               String?
  position                 String?
  status                   String            @default("active")
  deliveryCasesHandler     DeliveryCase[]    @relation("HandlerDeliveryCases")
  deliveryCasesRequester   DeliveryCase[]    @relation("RequesterDeliveryCases")
  deploymentCasesHandler   DeploymentCase[]  @relation("HandlerDeploymentCases")
  deploymentCasesReporter  DeploymentCase[]  @relation("ReporterDeploymentCases")
  incidentsHandler         Incident[]        @relation("HandlerIncidents")
  incidentsReporter        Incident[]        @relation("ReporterIncidents")
  internalCasesHandler     InternalCase[]    @relation("HandlerInternalCases")
  internalCasesRequester   InternalCase[]    @relation("RequesterInternalCases")
  maintenanceCasesHandler  MaintenanceCase[] @relation("HandlerMaintenanceCases")
  maintenanceCasesReporter MaintenanceCase[] @relation("ReporterMaintenanceCases")
  receivingCasesHandler    ReceivingCase[]   @relation("HandlerReceivingCases")
  receivingCasesRequester  ReceivingCase[]   @relation("RequesterReceivingCases")
  user                     User?
  warrantiesHandler        Warranty[]        @relation("HandlerWarranties")
  warrantiesReporter       Warranty[]        @relation("ReporterWarranties")
}

model Schedule {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime
  allDay      Boolean  @default(false)
  color       String?  @default("#3b82f6")
  location    String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Partner {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  address          String
  contactPerson    String?
  contactPhone     String?
  fullCompanyName  String
  shortName        String            @unique
  deliveryCases    DeliveryCase[]
  deploymentCases  DeploymentCase[]
  incidents        Incident[]
  maintenanceCases MaintenanceCase[]
  receivingCases   ReceivingCase[]
  warranties       Warranty[]
}

model CaseType {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KPIConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InternalCase {
  id                   String                @id @default(cuid())
  title                String
  description          String
  requesterId          String
  handlerId            String
  caseType             String
  form                 String                @default("Onsite")
  startDate            DateTime
  endDate              DateTime?
  status               InternalCaseStatus    @default(RECEIVED)
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  crmReferenceCode     String?
  handler              Employee              @relation("HandlerInternalCases", fields: [handlerId], references: [id])
  requester            Employee              @relation("RequesterInternalCases", fields: [requesterId], references: [id])
  comments             InternalCaseComment[]
  worklogs             InternalCaseWorklog[]
}

model InternalCaseComment {
  id             String       @id @default(cuid())
  internalCaseId String
  userId         String
  content        String
  createdAt      DateTime     @default(now())
  internalCase   InternalCase @relation(fields: [internalCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model InternalCaseWorklog {
  id             String       @id @default(cuid())
  internalCaseId String
  userId         String
  duration       Int
  description    String
  createdAt      DateTime     @default(now())
  internalCase   InternalCase @relation(fields: [internalCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model ReceivingCase {
  id                   String                 @id @default(cuid())
  title                String
  description          String
  requesterId          String
  handlerId            String
  supplierId           String
  form                 String                 @default("Onsite")
  startDate            DateTime
  endDate              DateTime?
  status               ReceivingCaseStatus    @default(RECEIVED)
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  crmReferenceCode     String?
  handler              Employee               @relation("HandlerReceivingCases", fields: [handlerId], references: [id])
  requester            Employee               @relation("RequesterReceivingCases", fields: [requesterId], references: [id])
  supplier             Partner                @relation(fields: [supplierId], references: [id])
  comments             ReceivingCaseComment[]
  products             ReceivingCaseProduct[]
  worklogs             ReceivingCaseWorklog[]
}

model ReceivingCaseComment {
  id              String        @id @default(cuid())
  receivingCaseId String
  userId          String
  content         String
  createdAt       DateTime      @default(now())
  receivingCase   ReceivingCase @relation(fields: [receivingCaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model ReceivingCaseWorklog {
  id              String        @id @default(cuid())
  receivingCaseId String
  userId          String
  duration        Int
  description     String
  createdAt       DateTime      @default(now())
  receivingCase   ReceivingCase @relation(fields: [receivingCaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model ReceivingCaseProduct {
  id              String        @id @default(cuid())
  receivingCaseId String
  name            String
  code            String?
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  serialNumber    String?
  receivingCase   ReceivingCase @relation(fields: [receivingCaseId], references: [id], onDelete: Cascade)
}

model DeliveryCase {
  id                   String                @id @default(cuid())
  title                String
  description          String
  requesterId          String
  handlerId            String
  customerId           String
  form                 String                @default("Onsite")
  startDate            DateTime
  endDate              DateTime?
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  status               DeliveryCaseStatus    @default(RECEIVED)
  crmReferenceCode     String?
  customer             Partner               @relation(fields: [customerId], references: [id])
  handler              Employee              @relation("HandlerDeliveryCases", fields: [handlerId], references: [id])
  requester            Employee              @relation("RequesterDeliveryCases", fields: [requesterId], references: [id])
  comments             DeliveryCaseComment[]
  products             DeliveryCaseProduct[]
  worklogs             DeliveryCaseWorklog[]
}

model DeliveryCaseComment {
  id             String       @id @default(cuid())
  deliveryCaseId String
  userId         String
  content        String
  createdAt      DateTime     @default(now())
  deliveryCase   DeliveryCase @relation(fields: [deliveryCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model DeliveryCaseWorklog {
  id             String       @id @default(cuid())
  deliveryCaseId String
  userId         String
  duration       Int
  description    String
  createdAt      DateTime     @default(now())
  deliveryCase   DeliveryCase @relation(fields: [deliveryCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model DeliveryCaseProduct {
  id             String       @id @default(cuid())
  deliveryCaseId String
  name           String
  code           String?
  quantity       Int
  serialNumber   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deliveryCase   DeliveryCase @relation(fields: [deliveryCaseId], references: [id], onDelete: Cascade)
}

model EvaluationConfig {
  id        String             @id @default(cuid())
  type      EvaluationType
  category  EvaluationCategory
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  options   EvaluationOption[]
}

model EvaluationOption {
  id        String           @id @default(cuid())
  configId  String
  label     String
  points    Int
  order     Int              @default(0)
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  config    EvaluationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model IncidentType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  incidents   Incident[]
}

model MaintenanceCaseType {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  maintenanceCases MaintenanceCase[]
}

model DeploymentType {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deploymentCases DeploymentCase[]
}

model Incident {
  id                   String            @id @default(cuid())
  title                String
  description          String
  customerName         String
  reporterId           String?
  handlerId            String
  incidentTypeId       String
  customerId           String?
  startDate            DateTime
  endDate              DateTime?
  status               IncidentStatus    @default(RECEIVED)
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  crmReferenceCode     String?
  customer             Partner?          @relation(fields: [customerId], references: [id])
  handler              Employee          @relation("HandlerIncidents", fields: [handlerId], references: [id])
  incidentType         IncidentType      @relation(fields: [incidentTypeId], references: [id])
  reporter             Employee?         @relation("ReporterIncidents", fields: [reporterId], references: [id])
  comments             IncidentComment[]
  worklogs             IncidentWorklog[]
}

model IncidentComment {
  id         String   @id @default(cuid())
  incidentId String
  userId     String
  content    String
  createdAt  DateTime @default(now())
  incident   Incident @relation(fields: [incidentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model IncidentWorklog {
  id          String   @id @default(cuid())
  incidentId  String
  userId      String
  duration    Int
  description String
  createdAt   DateTime @default(now())
  incident    Incident @relation(fields: [incidentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Equipment {
  id               String            @id @default(cuid())
  name             String
  model            String?
  serialNumber     String?
  location         String?
  status           String            @default("active")
  purchaseDate     DateTime?
  warrantyExpiry   DateTime?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  maintenanceCases MaintenanceCase[]
}

model MaintenanceCase {
  id                   String                   @id @default(cuid())
  title                String
  description          String
  reporterId           String
  handlerId            String
  equipmentId          String?
  customerName         String?
  customerId           String?
  maintenanceType      MaintenanceType
  maintenanceTypeId    String?
  startDate            DateTime
  endDate              DateTime?
  status               MaintenanceCaseStatus    @default(RECEIVED)
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  userAssessmentDate   DateTime?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  crmReferenceCode     String?
  customer             Partner?                 @relation(fields: [customerId], references: [id])
  equipment            Equipment?               @relation(fields: [equipmentId], references: [id])
  handler              Employee                 @relation("HandlerMaintenanceCases", fields: [handlerId], references: [id])
  maintenanceCaseType  MaintenanceCaseType?     @relation(fields: [maintenanceTypeId], references: [id])
  reporter             Employee                 @relation("ReporterMaintenanceCases", fields: [reporterId], references: [id])
  comments             MaintenanceCaseComment[]
  worklogs             MaintenanceCaseWorklog[]
}

model MaintenanceCaseComment {
  id                String          @id @default(cuid())
  maintenanceCaseId String
  userId            String
  content           String
  createdAt         DateTime        @default(now())
  maintenanceCase   MaintenanceCase @relation(fields: [maintenanceCaseId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model MaintenanceCaseWorklog {
  id                String          @id @default(cuid())
  maintenanceCaseId String
  userId            String
  duration          Int
  description       String
  createdAt         DateTime        @default(now())
  maintenanceCase   MaintenanceCase @relation(fields: [maintenanceCaseId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model WarrantyType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  warranties  Warranty[]
}

model Warranty {
  id                   String            @id @default(cuid())
  title                String
  description          String
  reporterId           String
  handlerId            String
  warrantyTypeId       String
  customerId           String?
  customerName         String
  startDate            DateTime
  endDate              DateTime?
  status               WarrantyStatus    @default(RECEIVED)
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  userAssessmentDate   DateTime?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  crmReferenceCode     String?
  customer             Partner?          @relation(fields: [customerId], references: [id])
  handler              Employee          @relation("HandlerWarranties", fields: [handlerId], references: [id])
  reporter             Employee          @relation("ReporterWarranties", fields: [reporterId], references: [id])
  warrantyType         WarrantyType      @relation(fields: [warrantyTypeId], references: [id])
  comments             WarrantyComment[]
  worklogs             WarrantyWorklog[]
}

model WarrantyComment {
  id         String   @id @default(cuid())
  warrantyId String
  userId     String
  content    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  warranty   Warranty @relation(fields: [warrantyId], references: [id])
}

model WarrantyWorklog {
  id          String   @id @default(cuid())
  warrantyId  String
  userId      String
  duration    Int
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  warranty    Warranty @relation(fields: [warrantyId], references: [id])
}

model DeploymentCase {
  id                   String                  @id @default(cuid())
  title                String
  description          String
  reporterId           String
  handlerId            String
  deploymentTypeId     String
  customerId           String?
  customerName         String
  startDate            DateTime
  endDate              DateTime?
  status               DeploymentCaseStatus    @default(RECEIVED)
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  userAssessmentDate   DateTime?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  crmReferenceCode     String?
  customer             Partner?                @relation(fields: [customerId], references: [id])
  deploymentType       DeploymentType          @relation(fields: [deploymentTypeId], references: [id])
  handler              Employee                @relation("HandlerDeploymentCases", fields: [handlerId], references: [id])
  reporter             Employee                @relation("ReporterDeploymentCases", fields: [reporterId], references: [id])
  comments             DeploymentCaseComment[]
  worklogs             DeploymentCaseWorklog[]
}

model DeploymentCaseComment {
  id               String         @id @default(cuid())
  deploymentCaseId String
  userId           String
  content          String
  createdAt        DateTime       @default(now())
  deploymentCase   DeploymentCase @relation(fields: [deploymentCaseId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
}

model DeploymentCaseWorklog {
  id               String         @id @default(cuid())
  deploymentCaseId String
  userId           String
  duration         Int
  description      String
  createdAt        DateTime       @default(now())
  deploymentCase   DeploymentCase @relation(fields: [deploymentCaseId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  userId    String
  caseId    String?
  caseType  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  IT_LEAD
  IT_STAFF
  USER
}

enum InternalCaseStatus {
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReceivingCaseStatus {
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DeliveryCaseStatus {
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EvaluationType {
  USER
  ADMIN
}

enum EvaluationCategory {
  DIFFICULTY
  TIME
  IMPACT
  URGENCY
  FORM
}

enum IncidentStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum MaintenanceCaseStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  ROUTINE
  UPGRADE
  INSPECTION
}

enum WarrantyStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum DeploymentCaseStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum NotificationType {
  CASE_CREATED
  CASE_UPDATED
  CASE_COMPLETED
  CASE_ASSIGNED
  SYSTEM_ALERT
}
