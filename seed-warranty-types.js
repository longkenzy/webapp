const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedWarrantyTypes() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho WarrantyType...');

    // D·ªØ li·ªáu m·∫´u cho c√°c lo·∫°i b·∫£o h√†nh
    const warrantyTypes = [
      {
        name: 'hardware-warranty',
        description: 'B·∫£o h√†nh ph·∫ßn c·ª©ng - B·∫£o h√†nh c√°c thi·∫øt b·ªã ph·∫ßn c·ª©ng nh∆∞ m√°y t√≠nh, server, thi·∫øt b·ªã m·∫°ng'
      },
      {
        name: 'software-warranty',
        description: 'B·∫£o h√†nh ph·∫ßn m·ªÅm - B·∫£o h√†nh c√°c ·ª©ng d·ª•ng, h·ªá th·ªëng ph·∫ßn m·ªÅm v√† license'
      },
      {
        name: 'service-warranty',
        description: 'B·∫£o h√†nh d·ªãch v·ª• - B·∫£o h√†nh c√°c d·ªãch v·ª• h·ªó tr·ª£, t∆∞ v·∫•n v√† tri·ªÉn khai'
      },
      {
        name: 'extended-warranty',
        description: 'B·∫£o h√†nh m·ªü r·ªông - Gia h·∫°n b·∫£o h√†nh cho c√°c s·∫£n ph·∫©m ƒë√£ h·∫øt h·∫°n b·∫£o h√†nh ch√≠nh th·ª©c'
      },
      {
        name: 'replacement-warranty',
        description: 'B·∫£o h√†nh thay th·∫ø - B·∫£o h√†nh thay th·∫ø s·∫£n ph·∫©m l·ªói b·∫±ng s·∫£n ph·∫©m m·ªõi'
      },
      {
        name: 'repair-warranty',
        description: 'B·∫£o h√†nh s·ª≠a ch·ªØa - B·∫£o h√†nh s·ª≠a ch·ªØa v√† b·∫£o tr√¨ c√°c s·∫£n ph·∫©m h·ªèng h√≥c'
      },
      {
        name: 'preventive-warranty',
        description: 'B·∫£o h√†nh ph√≤ng ng·ª´a - B·∫£o h√†nh ƒë·ªãnh k·ª≥ ƒë·ªÉ ngƒÉn ng·ª´a s·ª± c·ªë v√† duy tr√¨ hi·ªáu su·∫•t'
      },
      {
        name: 'emergency-warranty',
        description: 'B·∫£o h√†nh kh·∫©n c·∫•p - B·∫£o h√†nh 24/7 cho c√°c s·ª± c·ªë nghi√™m tr·ªçng c·∫ßn x·ª≠ l√Ω ngay'
      }
    ];

    console.log(`üìù T·∫°o ${warrantyTypes.length} lo·∫°i b·∫£o h√†nh...`);

    // T·∫°o t·ª´ng lo·∫°i b·∫£o h√†nh
    for (const warrantyType of warrantyTypes) {
      try {
        const created = await prisma.warrantyType.create({
          data: warrantyType
        });
        console.log(`‚úÖ ƒê√£ t·∫°o: ${created.name} - ${created.description}`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i: ${warrantyType.name} - B·ªè qua`);
        } else {
          console.error(`‚ùå L·ªói t·∫°o ${warrantyType.name}:`, error.message);
        }
      }
    }

    // Ki·ªÉm tra k·∫øt qu·∫£
    const totalWarrantyTypes = await prisma.warrantyType.count();
    console.log(`\nüìä T·ªïng s·ªë lo·∫°i b·∫£o h√†nh trong database: ${totalWarrantyTypes}`);

    // Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ lo·∫°i b·∫£o h√†nh
    const allWarrantyTypes = await prisma.warrantyType.findMany({
      orderBy: { createdAt: 'asc' }
    });

    console.log('\nüìã Danh s√°ch t·∫•t c·∫£ lo·∫°i b·∫£o h√†nh:');
    allWarrantyTypes.forEach((type, index) => {
      console.log(`${index + 1}. ${type.name} - ${type.description}`);
    });

    console.log('\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u cho WarrantyType!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh t·∫°o d·ªØ li·ªáu m·∫´u:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
seedWarrantyTypes()
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
