const { PrismaClient } = require('@prisma/client');

// Production database connection
const prodDb = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://neondb_owner:npg_jzQACkco0T8S@ep-broad-truth-a1v49nhu-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
    }
  }
});

// Development database connection
const devDb = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://neondb_owner:npg_jzQACkco0T8S@ep-rapid-dream-a1b4rn5j-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
    }
  }
});

async function syncEmployees() {
  try {
    console.log('=== B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô Employee t·ª´ Production sang Development ===\n');

    // 1. L·∫•y d·ªØ li·ªáu employees t·ª´ production
    console.log('üì• ƒêang l·∫•y d·ªØ li·ªáu employees t·ª´ production...');
    const prodEmployees = await prodDb.employee.findMany({
      include: {
        user: true
      },
      orderBy: { createdAt: 'asc' }
    });
    
    console.log(`‚úÖ T√¨m th·∫•y ${prodEmployees.length} employees trong production database`);

    // 2. L·∫•y d·ªØ li·ªáu employees hi·ªán t·∫°i trong development
    console.log('\nüì• ƒêang l·∫•y d·ªØ li·ªáu employees hi·ªán t·∫°i trong development...');
    const devEmployees = await devDb.employee.findMany({
      include: {
        user: true
      }
    });
    
    console.log(`‚úÖ T√¨m th·∫•y ${devEmployees.length} employees trong development database`);

    // 3. T·∫°o map ƒë·ªÉ so s√°nh
    const devEmployeeMap = new Map();
    devEmployees.forEach(emp => {
      devEmployeeMap.set(emp.id, emp);
    });

    let createdCount = 0;
    let updatedCount = 0;
    let skippedCount = 0;

    console.log('\nüîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu...\n');

    // 4. ƒê·ªìng b·ªô t·ª´ng employee
    for (const prodEmployee of prodEmployees) {
      try {
        const devEmployee = devEmployeeMap.get(prodEmployee.id);
        
        if (!devEmployee) {
          // Employee ch∆∞a t·ªìn t·∫°i trong dev, t·∫°o m·ªõi
          console.log(`‚ûï T·∫°o m·ªõi employee: ${prodEmployee.fullName} (ID: ${prodEmployee.id})`);
          
          await devDb.employee.create({
            data: {
              id: prodEmployee.id,
              fullName: prodEmployee.fullName,
              position: prodEmployee.position,
              department: prodEmployee.department,
              companyEmail: prodEmployee.companyEmail,
              phoneNumber: prodEmployee.phoneNumber || null,
              address: prodEmployee.address || null,
              dateOfBirth: prodEmployee.dateOfBirth || null,
              gender: prodEmployee.gender || 'OTHER',
              isActive: prodEmployee.isActive !== undefined ? prodEmployee.isActive : true,
              createdAt: prodEmployee.createdAt,
              updatedAt: prodEmployee.updatedAt
            }
          });
          
          createdCount++;
        } else {
          // Employee ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra xem c√≥ c·∫ßn c·∫≠p nh·∫≠t kh√¥ng
          const needsUpdate = 
            devEmployee.fullName !== prodEmployee.fullName ||
            devEmployee.position !== prodEmployee.position ||
            devEmployee.department !== prodEmployee.department ||
            devEmployee.companyEmail !== prodEmployee.companyEmail ||
            devEmployee.phoneNumber !== prodEmployee.phoneNumber ||
            devEmployee.address !== prodEmployee.address ||
            devEmployee.isActive !== prodEmployee.isActive;

          if (needsUpdate) {
            console.log(`üîÑ C·∫≠p nh·∫≠t employee: ${prodEmployee.fullName} (ID: ${prodEmployee.id})`);
            
            await devDb.employee.update({
              where: { id: prodEmployee.id },
              data: {
                fullName: prodEmployee.fullName,
                position: prodEmployee.position,
                department: prodEmployee.department,
                companyEmail: prodEmployee.companyEmail,
                phoneNumber: prodEmployee.phoneNumber,
                address: prodEmployee.address,
                isActive: prodEmployee.isActive,
                updatedAt: new Date()
              }
            });
            
            updatedCount++;
          } else {
            console.log(`‚è≠Ô∏è  B·ªè qua employee: ${prodEmployee.fullName} (ID: ${prodEmployee.id}) - kh√¥ng c√≥ thay ƒë·ªïi`);
            skippedCount++;
          }
        }
      } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω employee ${prodEmployee.fullName} (ID: ${prodEmployee.id}):`, error.message);
      }
    }

    // 5. Th·ªëng k√™ k·∫øt qu·∫£
    console.log('\n=== üìä TH·ªêNG K√ä ƒê·ªíNG B·ªò ===');
    console.log(`‚úÖ T·∫°o m·ªõi: ${createdCount} employees`);
    console.log(`üîÑ C·∫≠p nh·∫≠t: ${updatedCount} employees`);
    console.log(`‚è≠Ô∏è  B·ªè qua: ${skippedCount} employees`);
    console.log(`üìà T·ªïng c·ªông: ${prodEmployees.length} employees ƒë∆∞·ª£c x·ª≠ l√Ω`);

    // 6. Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
    console.log('\nüîç Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng...');
    const finalDevEmployees = await devDb.employee.findMany();
    console.log(`‚úÖ Development database hi·ªán c√≥: ${finalDevEmployees.length} employees`);

    console.log('\nüéâ ƒê·ªìng b·ªô ho√†n t·∫•t th√†nh c√¥ng!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ƒë·ªìng b·ªô:', error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi database
    await prodDb.$disconnect();
    await devDb.$disconnect();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
  }
}

// Ch·∫°y script
syncEmployees();
