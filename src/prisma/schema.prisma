generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String?
  phone                 String?
  department            String?
  status                String?                @default("active")
  role                  Role                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  employeeId            String?                @unique
  password              String
  username              String                 @unique
  deliveryCaseComments  DeliveryCaseComment[]
  deliveryCaseWorklogs  DeliveryCaseWorklog[]
  internalCaseComments  InternalCaseComment[]
  internalCaseWorklogs  InternalCaseWorklog[]
  receivingCaseComments ReceivingCaseComment[]
  receivingCaseWorklogs ReceivingCaseWorklog[]
  incidentComments      IncidentComment[]
  incidentWorklogs      IncidentWorklog[]
  schedules             Schedule[]
  employee              Employee?              @relation(fields: [employeeId], references: [id])
}

model Employee {
  id                      String          @id @default(cuid())
  fullName                String
  dateOfBirth             DateTime
  gender                  String
  hometown                String
  religion                String
  ethnicity               String
  startDate               DateTime
  primaryPhone            String
  secondaryPhone          String?
  personalEmail           String
  companyEmail            String          @unique
  placeOfBirth            String
  permanentAddress        String
  temporaryAddress        String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  avatar                  String?
  contractType            String?
  department              String?
  position                String?
  status                  String          @default("active")
  deliveryCasesHandler    DeliveryCase[]  @relation("HandlerDeliveryCases")
  deliveryCasesRequester  DeliveryCase[]  @relation("RequesterDeliveryCases")
  internalCasesHandler    InternalCase[]  @relation("HandlerInternalCases")
  internalCasesRequester  InternalCase[]  @relation("RequesterInternalCases")
  receivingCasesHandler   ReceivingCase[] @relation("HandlerReceivingCases")
  receivingCasesRequester ReceivingCase[] @relation("RequesterReceivingCases")
  incidentsReporter       Incident[]      @relation("ReporterIncidents")
  incidentsHandler        Incident[]      @relation("HandlerIncidents")
  user                    User?
}

model Schedule {
  id        String   @id @default(cuid())
  userId    String
  title     String
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Partner {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  address         String
  contactPerson   String?
  contactPhone    String?
  fullCompanyName String
  shortName       String          @unique
  deliveryCases   DeliveryCase[]
  receivingCases  ReceivingCase[]
  incidents       Incident[]
}

model CaseType {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KPIConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InternalCase {
  id                   String                @id @default(cuid())
  title                String
  description          String
  requesterId          String
  handlerId            String
  caseType             String
  form                 String                @default("Onsite")
  startDate            DateTime
  endDate              DateTime?
  status               InternalCaseStatus    @default(RECEIVED)
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  handler              Employee              @relation("HandlerInternalCases", fields: [handlerId], references: [id])
  requester            Employee              @relation("RequesterInternalCases", fields: [requesterId], references: [id])
  comments             InternalCaseComment[]
  worklogs             InternalCaseWorklog[]
}

model InternalCaseComment {
  id             String       @id @default(cuid())
  internalCaseId String
  userId         String
  content        String
  createdAt      DateTime     @default(now())
  internalCase   InternalCase @relation(fields: [internalCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model InternalCaseWorklog {
  id             String       @id @default(cuid())
  internalCaseId String
  userId         String
  duration       Int
  description    String
  createdAt      DateTime     @default(now())
  internalCase   InternalCase @relation(fields: [internalCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model ReceivingCase {
  id                   String                 @id @default(cuid())
  title                String
  description          String
  requesterId          String
  handlerId            String
  supplierId           String
  form                 String                 @default("Onsite")
  startDate            DateTime
  endDate              DateTime?
  status               ReceivingCaseStatus    @default(RECEIVED)
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  handler              Employee               @relation("HandlerReceivingCases", fields: [handlerId], references: [id])
  requester            Employee               @relation("RequesterReceivingCases", fields: [requesterId], references: [id])
  supplier             Partner                @relation(fields: [supplierId], references: [id])
  comments             ReceivingCaseComment[]
  products             ReceivingCaseProduct[]
  worklogs             ReceivingCaseWorklog[]
}

model ReceivingCaseComment {
  id              String        @id @default(cuid())
  receivingCaseId String
  userId          String
  content         String
  createdAt       DateTime      @default(now())
  receivingCase   ReceivingCase @relation(fields: [receivingCaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model ReceivingCaseWorklog {
  id              String        @id @default(cuid())
  receivingCaseId String
  userId          String
  duration        Int
  description     String
  createdAt       DateTime      @default(now())
  receivingCase   ReceivingCase @relation(fields: [receivingCaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model ReceivingCaseProduct {
  id              String        @id @default(cuid())
  receivingCaseId String
  name            String
  code            String?
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  serialNumber    String?
  receivingCase   ReceivingCase @relation(fields: [receivingCaseId], references: [id], onDelete: Cascade)
}

model DeliveryCase {
  id                   String                @id @default(cuid())
  title                String
  description          String
  requesterId          String
  handlerId            String
  customerId           String
  form                 String                @default("Onsite")
  startDate            DateTime
  endDate              DateTime?
  notes                String?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  status               DeliveryCaseStatus    @default(RECEIVED)
  customer             Partner               @relation(fields: [customerId], references: [id])
  handler              Employee              @relation("HandlerDeliveryCases", fields: [handlerId], references: [id])
  requester            Employee              @relation("RequesterDeliveryCases", fields: [requesterId], references: [id])
  comments             DeliveryCaseComment[]
  products             DeliveryCaseProduct[]
  worklogs             DeliveryCaseWorklog[]
}

model DeliveryCaseComment {
  id             String       @id @default(cuid())
  deliveryCaseId String
  userId         String
  content        String
  createdAt      DateTime     @default(now())
  deliveryCase   DeliveryCase @relation(fields: [deliveryCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model DeliveryCaseWorklog {
  id             String       @id @default(cuid())
  deliveryCaseId String
  userId         String
  duration       Int
  description    String
  createdAt      DateTime     @default(now())
  deliveryCase   DeliveryCase @relation(fields: [deliveryCaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model DeliveryCaseProduct {
  id             String       @id @default(cuid())
  deliveryCaseId String
  name           String
  code           String?
  quantity       Int
  serialNumber   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deliveryCase   DeliveryCase @relation(fields: [deliveryCaseId], references: [id], onDelete: Cascade)
}

model EvaluationConfig {
  id        String             @id @default(cuid())
  type      EvaluationType
  category  EvaluationCategory
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  options   EvaluationOption[]
}

model EvaluationOption {
  id        String           @id @default(cuid())
  configId  String
  label     String
  points    Int
  order     Int              @default(0)
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  config    EvaluationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model IncidentType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  incidents   Incident[]
}

model Incident {
  id                   String           @id @default(cuid())
  title                String
  description          String
  reporterId           String
  handlerId            String
  incidentTypeId       String
  customerId           String?
  startDate            DateTime
  endDate              DateTime?
  status               IncidentStatus   @default(RECEIVED)
  notes                String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  adminAssessmentDate  DateTime?
  adminAssessmentNotes String?
  adminDifficultyLevel Int?
  adminEstimatedTime   Int?
  adminImpactLevel     Int?
  adminUrgencyLevel    Int?
  userAssessmentDate   DateTime?
  userDifficultyLevel  Int?
  userEstimatedTime    Int?
  userImpactLevel      Int?
  userUrgencyLevel     Int?
  userFormScore        Int?
  reporter             Employee         @relation("ReporterIncidents", fields: [reporterId], references: [id])
  handler              Employee         @relation("HandlerIncidents", fields: [handlerId], references: [id])
  customer             Partner?         @relation(fields: [customerId], references: [id])
  incidentType         IncidentType     @relation(fields: [incidentTypeId], references: [id])
  comments             IncidentComment[]
  worklogs             IncidentWorklog[]
}

model IncidentComment {
  id         String   @id @default(cuid())
  incidentId String
  userId     String
  content    String
  createdAt  DateTime @default(now())
  incident   Incident @relation(fields: [incidentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model IncidentWorklog {
  id         String   @id @default(cuid())
  incidentId String
  userId     String
  duration   Int
  description String
  createdAt  DateTime @default(now())
  incident   Incident @relation(fields: [incidentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  IT_LEAD
  IT_STAFF
  USER
}

enum InternalCaseStatus {
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReceivingCaseStatus {
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DeliveryCaseStatus {
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EvaluationType {
  USER
  ADMIN
}

enum EvaluationCategory {
  DIFFICULTY
  TIME
  IMPACT
  URGENCY
  FORM
}

enum IncidentStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  CANCELLED
}

