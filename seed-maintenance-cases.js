const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedMaintenanceCases() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u case b·∫£o tr√¨...');

    // L·∫•y danh s√°ch employees ƒë·ªÉ l√†m handler v√† reporter
    const employees = await prisma.employee.findMany({
      take: 5
    });

    if (employees.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y employees n√†o. Vui l√≤ng t·∫°o employees tr∆∞·ªõc.');
      return;
    }

    // L·∫•y danh s√°ch partners ƒë·ªÉ l√†m customer
    const partners = await prisma.partner.findMany({
      take: 3
    });

    // L·∫•y danh s√°ch maintenance case types
    const maintenanceTypes = await prisma.maintenanceCaseType.findMany({
      where: { isActive: true }
    });

    if (maintenanceTypes.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y maintenance types n√†o. Vui l√≤ng t·∫°o maintenance types tr∆∞·ªõc.');
      return;
    }

    // L·∫•y danh s√°ch equipment (n·∫øu c√≥)
    const equipment = await prisma.equipment.findMany({
      take: 3
    });

    // D·ªØ li·ªáu m·∫´u case b·∫£o tr√¨
    const sampleMaintenanceCases = [
      {
        title: "B·∫£o tr√¨ ƒë·ªãnh k·ª≥ m√°y ch·ªß web",
        description: "Th·ª±c hi·ªán b·∫£o tr√¨ ƒë·ªãnh k·ª≥ cho m√°y ch·ªß web production, bao g·ªìm c·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh, ki·ªÉm tra ph·∫ßn c·ª©ng v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t.",
        customerName: "C√¥ng ty ABC",
        status: "RECEIVED",
        startDate: new Date('2024-01-15T09:00:00Z'),
        endDate: new Date('2024-01-15T17:00:00Z'),
        notes: "C·∫ßn th√¥ng b√°o tr∆∞·ªõc cho kh√°ch h√†ng v·ªÅ th·ªùi gian downtime",
        userDifficultyLevel: 3,
        userEstimatedTime: 4,
        userImpactLevel: 4,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-10T10:00:00Z')
      },
      {
        title: "S·ª≠a ch·ªØa l·ªói database connection",
        description: "Kh·∫Øc ph·ª•c l·ªói k·∫øt n·ªëi database th∆∞·ªùng xuy√™n b·ªã timeout, ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu su·∫•t ·ª©ng d·ª•ng.",
        customerName: "C√¥ng ty XYZ",
        status: "PROCESSING",
        startDate: new Date('2024-01-20T14:00:00Z'),
        notes: "L·ªói x·∫£y ra v√†o gi·ªù cao ƒëi·ªÉm, c·∫ßn ∆∞u ti√™n x·ª≠ l√Ω",
        userDifficultyLevel: 4,
        userEstimatedTime: 6,
        userImpactLevel: 5,
        userUrgencyLevel: 4,
        userFormScore: 2,
        userAssessmentDate: new Date('2024-01-18T15:30:00Z')
      },
      {
        title: "N√¢ng c·∫•p h·ªá th·ªëng b·∫£o m·∫≠t",
        description: "C√†i ƒë·∫∑t v√† c·∫•u h√¨nh c√°c b·∫£n v√° b·∫£o m·∫≠t m·ªõi nh·∫•t cho h·ªá th·ªëng, bao g·ªìm firewall v√† antivirus.",
        customerName: "C√¥ng ty DEF",
        status: "COMPLETED",
        startDate: new Date('2024-01-10T08:00:00Z'),
        endDate: new Date('2024-01-12T16:00:00Z'),
        notes: "Ho√†n th√†nh ƒë√∫ng ti·∫øn ƒë·ªô, kh√°ch h√†ng h√†i l√≤ng",
        userDifficultyLevel: 2,
        userEstimatedTime: 3,
        userImpactLevel: 3,
        userUrgencyLevel: 3,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-08T09:00:00Z')
      },
      {
        title: "Ki·ªÉm tra v√† b·∫£o tr√¨ m√°y in c√¥ng nghi·ªáp",
        description: "Th·ª±c hi·ªán ki·ªÉm tra ƒë·ªãnh k·ª≥ m√°y in c√¥ng nghi·ªáp, v·ªá sinh, thay th·∫ø linh ki·ªán c·∫ßn thi·∫øt v√† hi·ªáu ch·ªânh ch·∫•t l∆∞·ª£ng in.",
        customerName: "Nh√† m√°y GHI",
        status: "RECEIVED",
        startDate: new Date('2024-01-25T10:00:00Z'),
        notes: "C·∫ßn mang theo ƒë·∫ßy ƒë·ªß d·ª•ng c·ª• v√† linh ki·ªán thay th·∫ø",
        userDifficultyLevel: 3,
        userEstimatedTime: 5,
        userImpactLevel: 2,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-22T11:00:00Z')
      },
      {
        title: "Kh·∫Øc ph·ª•c s·ª± c·ªë m·∫°ng LAN",
        description: "X·ª≠ l√Ω s·ª± c·ªë m·∫°ng LAN b·ªã ch·∫≠m v√† m·∫•t k·∫øt n·ªëi kh√¥ng ·ªïn ƒë·ªãnh t·∫°i vƒÉn ph√≤ng chi nh√°nh.",
        customerName: "C√¥ng ty JKL",
        status: "PROCESSING",
        startDate: new Date('2024-01-18T13:00:00Z'),
        notes: "S·ª± c·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn c√¥ng vi·ªác c·ªßa to√†n b·ªô nh√¢n vi√™n",
        userDifficultyLevel: 4,
        userEstimatedTime: 8,
        userImpactLevel: 5,
        userUrgencyLevel: 5,
        userFormScore: 2,
        userAssessmentDate: new Date('2024-01-17T14:00:00Z')
      },
      {
        title: "B·∫£o tr√¨ h·ªá th·ªëng ƒëi·ªÅu h√≤a trung t√¢m",
        description: "Ki·ªÉm tra, v·ªá sinh v√† b·∫£o tr√¨ h·ªá th·ªëng ƒëi·ªÅu h√≤a trung t√¢m t·∫°i t√≤a nh√† vƒÉn ph√≤ng.",
        customerName: "T√≤a nh√† MNO",
        status: "RECEIVED",
        startDate: new Date('2024-01-30T07:00:00Z'),
        notes: "C·∫ßn th·ª±c hi·ªán v√†o cu·ªëi tu·∫ßn ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ho·∫°t ƒë·ªông",
        userDifficultyLevel: 2,
        userEstimatedTime: 4,
        userImpactLevel: 1,
        userUrgencyLevel: 1,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-28T08:00:00Z')
      },
      {
        title: "C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm qu·∫£n l√Ω kho",
        description: "C·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi c·ªßa ph·∫ßn m·ªÅm qu·∫£n l√Ω kho, bao g·ªìm backup d·ªØ li·ªáu v√† training nh√¢n vi√™n.",
        customerName: "Kho h√†ng PQR",
        status: "COMPLETED",
        startDate: new Date('2024-01-05T09:00:00Z'),
        endDate: new Date('2024-01-07T17:00:00Z'),
        notes: "C·∫≠p nh·∫≠t th√†nh c√¥ng, nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c training",
        userDifficultyLevel: 3,
        userEstimatedTime: 6,
        userImpactLevel: 3,
        userUrgencyLevel: 2,
        userFormScore: 3,
        userAssessmentDate: new Date('2024-01-03T10:00:00Z')
      },
      {
        title: "S·ª≠a ch·ªØa m√°y ph√°t ƒëi·ªán d·ª± ph√≤ng",
        description: "Kh·∫Øc ph·ª•c s·ª± c·ªë m√°y ph√°t ƒëi·ªán d·ª± ph√≤ng kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c khi m·∫•t ƒëi·ªán.",
        customerName: "B·ªánh vi·ªán STU",
        status: "PROCESSING",
        startDate: new Date('2024-01-22T16:00:00Z'),
        notes: "S·ª± c·ªë kh·∫©n c·∫•p, ·∫£nh h∆∞·ªüng ƒë·∫øn ho·∫°t ƒë·ªông b·ªánh vi·ªán",
        userDifficultyLevel: 5,
        userEstimatedTime: 12,
        userImpactLevel: 5,
        userUrgencyLevel: 5,
        userFormScore: 1,
        userAssessmentDate: new Date('2024-01-21T17:00:00Z')
      }
    ];

    // T·∫°o maintenance cases
    for (let i = 0; i < sampleMaintenanceCases.length; i++) {
      const caseData = sampleMaintenanceCases[i];
      const randomEmployee = employees[Math.floor(Math.random() * employees.length)];
      const randomMaintenanceType = maintenanceTypes[Math.floor(Math.random() * maintenanceTypes.length)];
      const randomPartner = partners.length > 0 ? partners[Math.floor(Math.random() * partners.length)] : null;
      const randomEquipment = equipment.length > 0 ? equipment[Math.floor(Math.random() * equipment.length)] : null;

      const maintenanceCase = await prisma.maintenanceCase.create({
        data: {
          title: caseData.title,
          description: caseData.description,
          reporterId: randomEmployee.id,
          handlerId: randomEmployee.id,
          customerName: caseData.customerName,
          customerId: randomPartner ? randomPartner.id : null,
          equipmentId: randomEquipment ? randomEquipment.id : null,
          maintenanceType: 'PREVENTIVE', // Default enum value
          maintenanceTypeId: randomMaintenanceType.id,
          startDate: caseData.startDate,
          endDate: caseData.endDate,
          status: caseData.status,
          notes: caseData.notes,
          userDifficultyLevel: caseData.userDifficultyLevel,
          userEstimatedTime: caseData.userEstimatedTime,
          userImpactLevel: caseData.userImpactLevel,
          userUrgencyLevel: caseData.userUrgencyLevel,
          userFormScore: caseData.userFormScore,
          userAssessmentDate: caseData.userAssessmentDate
        }
      });

      console.log(`‚úÖ T·∫°o case b·∫£o tr√¨: ${maintenanceCase.title}`);
    }

    console.log(`üéâ ƒê√£ t·∫°o th√†nh c√¥ng ${sampleMaintenanceCases.length} case b·∫£o tr√¨ m·∫´u!`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y function
seedMaintenanceCases();
