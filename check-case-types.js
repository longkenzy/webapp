// Script ki·ªÉm tra d·ªØ li·ªáu CaseType
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkCaseTypes() {
    console.log('=== KI·ªÇM TRA D·ªÆ LI·ªÜU CASE TYPES ===');
    console.log('Database: ep-rapid-dream-a1b4rn5j (Development)');
    console.log('');

    try {
        const caseTypes = await prisma.caseType.findMany({
            orderBy: { name: 'asc' }
        });

        console.log(`T·ªïng s·ªë lo·∫°i case: ${caseTypes.length}`);
        console.log('');

        if (caseTypes.length > 0) {
            console.log('Danh s√°ch t·∫•t c·∫£ lo·∫°i case:');
            console.log('=================================');
            
            const categories = {
                'N·ªôi b·ªô': caseTypes.filter(ct => 
                    ct.name.includes('n·ªôi b·ªô') || 
                    ct.name.includes('H·ªó tr·ª£ IT') ||
                    ct.name.includes('B·∫£o tr√¨ h·ªá th·ªëng') ||
                    ct.name.includes('C√†i ƒë·∫∑t ph·∫ßn m·ªÅm') ||
                    ct.name.includes('Kh·∫Øc ph·ª•c s·ª± c·ªë m·∫°ng') ||
                    ct.name.includes('Backup d·ªØ li·ªáu') ||
                    ct.name.includes('C·∫≠p nh·∫≠t h·ªá th·ªëng') ||
                    ct.name.includes('H·ªó tr·ª£ ng∆∞·ªùi d√πng') ||
                    ct.name.includes('Ki·ªÉm tra b·∫£o m·∫≠t')
                ),
                'Giao h√†ng': caseTypes.filter(ct => 
                    ct.name.includes('Giao h√†ng')
                ),
                'Nh·∫≠n h√†ng': caseTypes.filter(ct => 
                    ct.name.includes('Nh·∫≠n h√†ng')
                ),
                'B·∫£o h√†nh': caseTypes.filter(ct => 
                    ct.name.includes('B·∫£o h√†nh') ||
                    ct.name.includes('Thay th·∫ø linh ki·ªán') ||
                    ct.name.includes('S·ª≠a ch·ªØa thi·∫øt b·ªã')
                ),
                'B·∫£o tr√¨': caseTypes.filter(ct => 
                    ct.name.includes('B·∫£o tr√¨')
                ),
                'S·ª± c·ªë': caseTypes.filter(ct => 
                    ct.name.includes('S·ª± c·ªë')
                ),
                'Tri·ªÉn khai': caseTypes.filter(ct => 
                    ct.name.includes('Tri·ªÉn khai')
                )
            };

            Object.entries(categories).forEach(([category, caseTypes]) => {
                if (caseTypes.length > 0) {
                    console.log(`\nüìÅ ${category} (${caseTypes.length} lo·∫°i):`);
                    caseTypes.forEach(ct => {
                        console.log(`  - ${ct.name} (${ct.isActive ? 'Active' : 'Inactive'})`);
                    });
                }
            });

            console.log('');
            console.log('‚úÖ D·ªÆ LI·ªÜU CASE TYPES ƒê√É S·∫¥N S√ÄNG!');
            console.log('B√¢y gi·ªù b·∫°n c√≥ th·ªÉ t·∫°o c√°c lo·∫°i case v·ªõi d·ªØ li·ªáu ph√π h·ª£p');
        } else {
            console.log('‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu case types n√†o');
            console.log('Ch·∫°y: node seed-case-types.js ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u');
        }

    } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra case types:', error.message);
    } finally {
        await prisma.$disconnect();
    }
}

checkCaseTypes();
